from rest_framework import serializers
from apps.findings import models
from apps.assets.models import WebApplication, WebRequest
from apps.assets.models import Service, Host


class VulnerabilitySerializer(serializers.ModelSerializer):
    # TODO: filter if asset is part of the project
    template_id = serializers.CharField()
    asset = serializers.CharField()

    def check_exists(self, validated_data):
        template = models.Template.objects.filter(
            vulnerability_id=validated_data["template_id"])
        if not template.exists():
            return
        template = template.get()
        qs = models.Vulnerability.objects.filter(
            name=validated_data["name"],
            template=template
        )
        if validated_data["asset_type"] == Host.ASSET_TYPE:
            asset = Host.objects.get(
                project=validated_data["project"],
                pk=validated_data["asset"])
            qs = qs.filter(asset_host=asset)
        elif validated_data["asset_type"] == Service.ASSET_TYPE:
            asset = Service.objects.get(
                project=validated_data["project"],
                pk=validated_data["asset"])
            qs = qs.filter(asset_service=asset)
        elif validated_data["asset_type"] == WebApplication.ASSET_TYPE:
            asset = WebApplication.objects.get(
                project=validated_data["project"],
                pk=validated_data["asset"])
            qs = qs.filter(asset_webapp=asset)
        elif validated_data["asset_type"] == WebRequest.ASSET_TYPE:
            asset = WebRequest.objects.get(
                project=validated_data["project"],
                pk=validated_data["asset"])
            qs = qs.filter(asset_webrequest=asset)
        else:
            return
        if qs.exists():
            return qs.get()
        return

    def create(self, validated_data):
        existing_vuln = self.check_exists(validated_data)
        if existing_vuln:
            return existing_vuln
        asset_data = validated_data.pop('asset')
        template = models.Template.objects.filter(
            vulnerability_id=validated_data["template_id"])
        del validated_data["template_id"]
        if template.exists():
            validated_data["template"] = template.get()
            if not validated_data.get("severity"):
                validated_data["severity"] = template.get().severity
        if validated_data["asset_type"] == WebApplication.ASSET_TYPE:
            asset = WebApplication.objects.get(
                project=validated_data["project"], pk=asset_data)
            vulnerability = models.Vulnerability.objects.create(
                **validated_data, asset_webapp=asset)
        elif validated_data["asset_type"] == WebRequest.ASSET_TYPE:
            asset = WebRequest.objects.get(
                project=validated_data["project"], pk=asset_data)
            vulnerability = models.Vulnerability.objects.create(
                **validated_data, asset_webrequest=asset)
        elif validated_data["asset_type"] == Service.ASSET_TYPE:
            asset = Service.objects.get(
                project=validated_data["project"], pk=asset_data)
            vulnerability = models.Vulnerability.objects.create(
                **validated_data, asset_service=asset)
        elif validated_data["asset_type"] == Host.ASSET_TYPE:
            asset = Host.objects.get(
                project=validated_data["project"], pk=asset_data)
            vulnerability = models.Vulnerability.objects.create(
                **validated_data, asset_host=asset)
        return vulnerability

    class Meta:
        model = models.Vulnerability
        fields = [
            "name", "cve_id", "severity", "template_id", "asset",
            "status", "project", "asset_type", "uuid"]
        read_only_fields = ["uuid", "project"]

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data["status"] = instance.get_status_display()
        data["template_id"] = instance.template.vulnerability_id
        return data


class TextProofSerializer(serializers.ModelSerializer):
    class Meta:
        model = models.TextProof
        fields = [
            "order", "pk", "name", "description", "text",
            "project", "vulnerability"]
        read_only_fields = ["pk", "project"]

    def create(self, validated_data):
        qs = models.TextProof.objects.filter(
            project=validated_data["project"],
            vulnerability=validated_data["vulnerability"],
            name=validated_data["name"])
        if qs.exists():
            return qs.get()
        return super().create(validated_data)

    def __init__(self, project, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["vulnerability"].queryset = project.vulnerability_set.all()
        if self.instance is not None:
            self.fields["vulnerability"].read_only = True
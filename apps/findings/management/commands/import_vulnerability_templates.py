import yaml
import os
from pathlib import Path
from django.conf import settings
from django.core.management.base import BaseCommand
from apps.findings import models


class Command(BaseCommand):
    help = 'Import vulnerability templates from JSON file'

    def add_arguments(self, parser):
        parser.add_argument('--file', type=str)

    def handle(self, *args, **options):
        import_counter = 0
        if options.get('file'):
            self._import_file(options.get('file'), import_counter)
        else:
            for path in Path(os.path.join(settings.BASE_DIR, 'resources/templates')).rglob('info.yaml'):
                self._import_file(path, import_counter)
        self.stdout.write(self.style.SUCCESS('Successfully imported/updated "%s" templates' % import_counter))

    def _get_description(self, filename):
        desc_filename = str(filename).replace("info.yaml", "description_en.md")
        with open(desc_filename) as f:
            return f.read()

    def _get_resolution(self, filename):
        desc_filename = str(filename).replace("info.yaml", "resolution_en.md")
        with open(desc_filename) as f:
            return f.read()


    def _import_file(self, filename, import_counter):
        with open(filename, "r") as f:
            for item in yaml.safe_load(f):
                description = self._get_description(filename)
                resolution = self._get_resolution(filename)
                template, created = models.Template.objects.update_or_create(name=item["name"], 
                    defaults={"description": description, 'cve_id': item.get('cve_id'), 'ease_of_resolution': item.get('ease_of_resolution', "undetermined"), 'resolution': resolution})

                if created:
                    for reference in item.get('references', []):
                        models.Reference.objects.create(template=template, name=reference)
                    import_counter += 1

import yaml
import os
from pathlib import Path
from django.conf import settings
from django.db.models import Q
from django.core.management.base import BaseCommand
from apps.findings import models


class Command(BaseCommand):
    help = 'Import vulnerability templates from JSON file'

    def handle(self, *args, **options):
        import_counter = 0
        self.import_categories()
        for path in Path(os.path.join(settings.BASE_DIR, 'resources/vuln_templates')).rglob('info.yaml'):
            self._import_file(path, import_counter)
        self.stdout.write(self.style.SUCCESS('Successfully imported/updated "%s" templates' % import_counter))

    def import_categories(self):
        self.stdout.write("Importing categories...")
        with open(os.path.join(settings.BASE_DIR, "resources/vuln_templates/templates/categories.yaml"), "r") as f:
            category_ids = []
            for key, value in yaml.safe_load(f).items():
                models.VulnerabilityCategory.objects.update_or_create(name=key)
                category_ids.append(key)
            # delete old categories
            models.VulnerabilityCategory.objects.filter(~Q(name__in=category_ids)).delete()

    def _get_description(self, filename):
        desc_filename = str(filename).replace("info.yaml", "description_en.md")
        with open(desc_filename) as f:
            return f.read()

    def _get_resolution(self, filename):
        desc_filename = str(filename).replace("info.yaml", "resolution_en.md")
        with open(desc_filename) as f:
            return f.read()

    def _severity_to_choice(self, severity_str):
        for item in models.SEVERITY_CHOICES:
            if item[1] == severity_str.capitalize():
                return item[0]
        raise Exception("Invalid severity")

    def _import_file(self, filename, import_counter):
        with open(filename, "r") as f:
            for item in yaml.safe_load(f):
                description = self._get_description(filename)
                resolution = self._get_resolution(filename)
                template, created = models.Template.objects.update_or_create(vulnerability_id=item["id"], 
                    defaults={"description": description, 'name': item["name"], 'severity': self._severity_to_choice(item["severity"]), 'recommendation': resolution})
                for category in item.get('categories'):
                    template.categories.add(models.VulnerabilityCategory.objects.get(name=category))
                for cwe_entry in item.get("cwe", []):
                    entry, _entry_created = models.CWEEntry.objects.update_or_create(entry=cwe_entry)
                    template.cwe_ids.add(entry)
                if created:
                    for reference in item.get('references', []):
                        models.Reference.objects.create(template=template, name=reference)
                    import_counter += 1
